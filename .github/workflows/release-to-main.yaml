name: Release
on:
    pull_request:
      types:
        - closed
jobs:
  tests:
    name: Tests
    if: success() && github.event.pull_request.merged == true && github.head_ref == 'develop'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout de repositorio
      uses: actions/checkout@v2
    - name: Environment configuration
      uses: actions/setup-python@v2
      with:
          python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade "pip<24.1" 
        pip install -r requirements.txt
    - name: Running tests 🧪
      id: test-running-id
      run: |
        make run-tests
      env:
        FLASK_ENV: test
    - name: Validate results with errors
      if: ${{ failure() }}
      env:
        ERROR_MESSAGE: One or various test failed 🔴
      run: echo "::set-output name=answer::${ERROR_MESSAGE}"
    - name: Validate result without errors
      if: ${{ success() }}
      env:
        MESSAGE_SUCCESS: All the tests were success
      run: echo "::set-output name=answer::${MESSAGE_SUCCESS}"
    - name: Coverage calculation 📊
      id: Coverage
      run: |
        make run-tests-coverage
  
  deploy:
    name: Deploy
    if: success() && github.event.pull_request.merged == true && github.head_ref == 'develop'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      - name: Configure Docker to use GCR
        run: gcloud auth configure-docker us-east1-docker.pkg.dev

      - name: Build and push Docker 🐳 image
        env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          docker build -t us-east1-docker.pkg.dev/$PROJECT_ID/$PROJECT_ID/saludtechalpes-medical-history-service:build-$GITHUB_RUN_NUMBER .
          docker push us-east1-docker.pkg.dev/$PROJECT_ID/$PROJECT_ID/saludtechalpes-medical-history-service:build-$GITHUB_RUN_NUMBER
      
      - name: Get GKE credentials and kubectl apply and deploy 🚀
        env:
          CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
          CLUSTER_REGION: ${{ vars.CLUSTER_REGION }}
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_HOST: ${{ secrets.DB_HOST }}
        run: |
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True
          gcloud container clusters get-credentials $CLUSTER_NAME --region $CLUSTER_REGION --project $PROJECT_ID
          sudo apt-get update
          sudo apt-get install -y curl apt-transport-https ca-certificates gnupg
          curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin
          sudo apt-get install kubectl
          kubectl version --client
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_HOST=${{ secrets.DB_HOST }}
          sed "s/{{IMAGE_TAG}}/build-${GITHUB_RUN_NUMBER}/g" ./kubernetes/staging/k8s-deployment.tmpl > kubernetes/staging/k8s-deployment.yaml
          sed -e "s|{{DB_USER}}|${DB_USER}|g" \
          -e "s|{{DB_PASSWORD}}|${DB_PASSWORD}|g" \
          -e "s|{{DB_NAME}}|${DB_NAME}|g" \
          -e "s|{{DB_PORT}}|${DB_PORT}|g" \
          -e "s|{{DB_HOST}}|${DB_HOST}|g" \
          ./kubernetes/staging/k8s-secrets.tmpl > kubernetes/staging/k8s-secrets.yaml
          kubectl apply -f kubernetes/staging/k8s-configMap.yaml
          kubectl apply -f kubernetes/staging/k8s-secrets.yaml
          kubectl apply -f kubernetes/staging/k8s-deployment.yaml
          kubectl apply -f kubernetes/staging/k8s-hpa.yaml
          kubectl apply -f kubernetes/staging/k8s-ingress.yaml